package odps.utils;

import com.aliyun.odps.udf.UDF;

/**
 * @author zhanggh
 * @description: 线路是否经过道路，判断两条经纬度是否相交 （坐标误差10米）
 * @date 2022/3/2 11:22
 */

public class LineOnTheWay extends UDF {

    public Integer evaluate(String xljwd,String ridjwd) {
        String[] xllng_lat = xljwd.split(";");
        String[] ridlng_lat = ridjwd.split(";");

        double distance;
        Integer flag = -1;

        first:
        for (String lonlat:xllng_lat) {
            for (String lonlat2:ridlng_lat) {
                String[] l = lonlat.split(",");
                String[] l2 = lonlat2.split(",");
                distance = distance(Double.parseDouble(l[1]), Double.parseDouble(l2[1]), Double.parseDouble(l[0]), Double.parseDouble(l2[0]));
                if (distance <= 10) {
                    //有2个坐标距离小于10米
                    flag++;
                    if (flag == 1) {
                        break first;
                    }
                }
            }
        }
        return flag;
    }

    public static double distance(double lat1, double lat2, double lon1, double lon2) {
        // 地球半径
        final int R = 6371;
        double latDistance = Math.toRadians(lat2 - lat1);
        double lonDistance = Math.toRadians(lon2 - lon1);
        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        // 单位转换成米
        double distance = R * c * 1000;
        distance = Math.pow(distance, 2);
        return Math.sqrt(distance);
    }


    public static void main(String[] args) {
        String jwd = "120.948511,30.778563;120.94862,30.778668;120.948837,30.778707;120.94924,30.778811;120.949249,30.778954;120.949214,30.77918;120.949041,30.779748;120.948772,30.780647;120.948576,30.781354;120.948507,30.78161;120.948451,30.78181;120.94842,30.781923;120.948281,30.782444;120.948837,30.782548;120.949418,30.782652;120.949666,30.782704;120.95046,30.782856;120.951237,30.783008;120.951875,30.782161;120.951918,30.782105;120.952235,30.781688;120.952695,30.78105;120.95309,30.780521;120.95316,30.780443;120.953338,30.780326;120.953477,30.780391;120.953694,30.780456;120.95401,30.78056;120.954918,30.780894;120.955699,30.781189;120.956602,30.781506;120.956706,30.781545;120.955938,30.782005;120.953134,30.783689;120.953103,30.783707;120.952765,30.783924;120.952448,30.784136;120.952114,30.784371;120.951931,30.784531;120.951762,30.784696;120.95145,30.78503;120.951259,30.785278;120.951107,30.785508;120.950907,30.785851;120.950816,30.78605;120.950651,30.786493;120.950564,30.786806;120.950499,30.78717;120.950443,30.787539;120.950352,30.788459;120.950265,30.789236;120.950243,30.789401;120.950191,30.7899;120.950188,30.7899;120.950188,30.789896;120.950157,30.79027;120.950035,30.791254;120.949966,30.79203;120.949928,30.792353;120.949913,30.792414;120.949806,30.793091;120.949715,30.793642;120.949638,30.794132;120.949516,30.794718;120.949211,30.795959;120.949089,30.796402;120.948715,30.797613;120.94857,30.798056;120.948334,30.798801;120.948189,30.79925;120.947723,30.800665;120.947708,30.800724;120.947479,30.801332;120.947477,30.801333;120.947327,30.801785;120.94706,30.802677;120.947029,30.802805;120.946754,30.803694;120.946465,30.804691;120.946251,30.805565;120.94622,30.805664;120.945946,30.806986;120.945778,30.807951;120.945572,30.808052;120.945152,30.80806;120.944069,30.808107;120.944008,30.808107;120.942848,30.808151;120.942818,30.808151;120.94165,30.808195;120.940392,30.808243;120.939323,30.808292;120.938736,30.808329;120.938667,30.808325;120.938057,30.808346;120.937767,30.808359;120.9375,30.808372;120.936783,30.808397;120.936485,30.808407;120.936188,30.80842;120.935883,30.808424;120.935059,30.808456;120.934273,30.808489;120.934006,30.808493;120.93351,30.808516;120.932571,30.808552;120.932106,30.808569;120.927643,30.808746;120.9263,30.808802;120.925941,30.808971;120.92585,30.809036;120.925697,30.809227;120.925644,30.809311;120.925621,30.809404;120.92601,30.814058;120.926079,30.814861;120.926239,30.815069;120.926414,30.815231;120.926559,30.815338;120.926727,30.815332;120.927185,30.815329;120.929642,30.81531;120.930077,30.815304;120.930412,30.815304;120.930664,30.815304;120.931007,30.815296;120.931358,30.81529;120.931786,30.81529;120.931832,30.815286;120.931992,30.815291;120.93296,30.815291;120.934306,30.815291;120.934709,30.815317;120.936879,30.815673;120.936984,30.815699;120.9375,30.81579;120.938416,30.815951;120.938806,30.816068;120.93898,30.81615;120.939167,30.816254;120.939353,30.816398;120.939492,30.816519;120.939605,30.816649;120.93967,30.816719;120.939757,30.816836;120.939944,30.817205;120.940095,30.817899;120.940169,30.818234;120.940169,30.818229;120.940195,30.818342;120.940243,30.818559;120.940373,30.819115;120.940395,30.819245;120.94046,30.819549;120.940486,30.819727;120.940078,30.819727;120.9375,30.819696;120.936871,30.819692;120.935707,30.819679;120.935291,30.81967;120.93409,30.819658;120.932976,30.819649;120.932007,30.819635;120.931229,30.819632;120.928337,30.819586;120.928238,30.819586;120.927589,30.819599;120.927025,30.819605;120.926735,30.819809;120.926682,30.819862;120.926506,30.820105;120.926544,30.820551;120.926544,30.820547;120.926552,30.820751;120.926575,30.821033;120.926659,30.821884;120.926804,30.823412;120.926819,30.823654;120.926834,30.823929;120.926842,30.824022;120.926888,30.824535;120.926926,30.825005;120.926926,30.825008;120.926926,30.825005;120.926926,30.82513;120.927116,30.827244;120.927269,30.828733;120.927338,30.829241;120.927345,30.829374;120.927345,30.829817;120.927353,30.830069;120.927376,30.830404;120.927429,30.830976;120.92746,30.831242;120.927521,30.831919;120.927635,30.833178;120.927689,30.833794;120.927757,30.834623;120.927757,30.834726;120.927795,30.835407;120.927864,30.836384;120.927917,30.837114;120.927925,30.837109;120.927963,30.837591;120.928047,30.838411;120.92807,30.838619;120.928169,30.839462;120.928276,30.839869;120.928551,30.840698;120.928711,30.841024;120.928963,30.841549;120.92897,30.841572;120.929176,30.841984;120.929306,30.842365;120.92939,30.842665;120.929497,30.843374;120.929527,30.843624;120.929573,30.844023;120.929634,30.844498;120.929657,30.844683;120.929649,30.844688;120.929649,30.844683;120.929939,30.846767;120.929938,30.846766;120.929955,30.846931;120.930008,30.847374;120.930077,30.847942;120.930008,30.848;120.929016,30.848;120.92881,30.847996;120.928806,30.847995;120.928082,30.84799;120.927487,30.848008;120.924753,30.848095;120.92375,30.848077;120.922817,30.84806;120.922821,30.848061;120.922173,30.848047;120.922035,30.848047;120.920471,30.848042;120.920311,30.848042;120.918633,30.848034;120.917747,30.848024;120.917679,30.848024;120.916823,30.848012;120.91645,30.848012\n";
        String rid = "120.928464,30.840708;120.928311,30.840222;120.92828,30.840121;120.928258,30.840049;120.928208,30.839885;120.928119,30.839568;120.928075,30.839386;120.928053,30.839266;120.928042,30.839203;120.928023,30.839084;120.928004,30.83893;120.927971,30.838636;120.927951,30.838397;120.927905,30.837784;120.927896,30.8377";
        LineOnTheWay ridDistance = new LineOnTheWay();
        System.out.println(ridDistance.evaluate(jwd, rid));
    }
}
