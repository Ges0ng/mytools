package odps.utils;

import com.aliyun.odps.udf.UDF;

/**
 * @author zhanggh
 * @description: TODO
 * @date 2022/3/2 11:22
 */

public class LineOnTheWay extends UDF {

    public Integer evaluate(String xljwd,String ridjwd) {
        String[] xllng_lat = xljwd.split(";");
        String[] ridlng_lat = ridjwd.split(";");

        double distance;
        Integer flag = -1;

        first:
        for (String lonlat:xllng_lat) {
            for (String lonlat2:ridlng_lat) {
                String[] l = lonlat.split(",");
                String[] l2 = lonlat2.split(",");
                distance = distance(Double.parseDouble(l[1]), Double.parseDouble(l2[1]), Double.parseDouble(l[0]), Double.parseDouble(l2[0]));
                if (distance <= 10) {
                    System.out.println(distance);
                    flag=1;
                    break first;
                }
            }
        }
        return flag;
    }

    public static double distance(double lat1, double lat2, double lon1, double lon2) {
        final int R = 6371; // 地球半径
        double latDistance = Math.toRadians(lat2 - lat1);
        double lonDistance = Math.toRadians(lon2 - lon1);
        double a = Math.sin(latDistance / 2) * Math.sin(latDistance / 2)
                + Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2))
                * Math.sin(lonDistance / 2) * Math.sin(lonDistance / 2);
        double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        double distance = R * c * 1000; // 单位转换成米
        distance = Math.pow(distance, 2);
        return Math.sqrt(distance);
    }


    public static void main(String[] args) {
        String jwd = "117.242895,33.683394;117.242807,33.683964;117.24276,33.68428;117.242571,33.685544;117.242364,33.686932;117.242321,33.687215;117.242147,33.688382";
        String rid = "117.247487,33.680404;117.247665,33.679093;117.247786,33.678199;117.247808,33.678051;117.247899,33.677357;117.248034,33.676328;117.248077,33.676011;117.248234,33.674848;117.248234,33.674826;117.24826,33.674618;117.248307,33.674284;117.248464,33.673095;117.248472,33.67303;117.248633,33.671845;117.248646,33.671732;117.248724,33.671198;117.248737,33.670946;117.248746,33.670872;117.247973,33.670807;117.24773,33.670786;117.247726,33.670786;117.247148,33.670729;117.246385,33.670673;117.246094,33.670647;117.244813,33.670525;117.244722,33.670512;117.243008,33.670365;117.241897,33.670278;117.241042,33.670191;117.24033,33.670122;117.240221,33.670113;117.239449,33.670035;117.23918,33.670009;117.238641,33.669957;117.23628,33.669761;117.234653,33.669614;117.234648,33.669614;117.234436,33.669596;117.23375,33.669544;117.233125,33.669531;117.231914,33.669579;117.231441,33.669635;117.231076,33.669696;117.230729,33.669757;117.230369,33.669839;117.230308,33.669852;117.229779,33.669978;117.229401,33.670082;117.229219,33.670143;117.228902,33.670243;117.227209,33.670942;117.227148,33.670968;117.226602,33.671215;117.225885,33.671549;117.225707,33.671628;117.225278,33.671823;117.224939,33.671957;117.22464,33.672075;117.224119,33.672279;117.222917,33.672756;117.222179,33.673095;117.221545,33.673381;117.217951,33.675009;117.21727,33.675312;117.217209,33.675343;117.215312,33.676215;117.214453,33.676593;117.214397,33.676619;117.212439,33.677504;117.211463,33.677951;117.210907,33.678207;117.210734,33.678238;117.210872,33.678155;117.212635,33.677352;117.214362,33.676563;117.214414,33.676536;117.215816,33.675881;117.216684,33.675525;117.217179,33.675299;117.217235,33.675273;117.217938,33.674957;117.219345,33.674319;117.221298,33.67342;117.221545,33.673307;117.222023,33.673095;117.222886,33.672708;117.224119,33.672161;117.224874,33.671823;117.225191,33.671662;117.225616,33.671493;117.225885,33.671549;117.22635,33.672391;117.226727,33.673095;117.22674,33.673121;117.22704,33.673672;117.22704,33.673668;117.227118,33.673811;117.22724,33.674106;117.2274,33.674583;117.227483,33.6749;117.227513,33.675139;117.227513,33.67526;117.227526,33.676033;117.227513,33.676237;117.227348,33.6773;117.227348,33.677296;117.227331,33.677396;117.227174,33.678255;117.227075,33.678937;117.227031,33.679223;117.226875,33.680438;117.226619,33.682096;117.226602,33.682166;117.226484,33.682934;117.226302,33.68408;117.226272,33.684266;117.226259,33.684314;117.226068,33.685859;117.225911,33.686871;117.226719,33.686936;117.227057,33.686966;117.227053,33.686966;117.23003,33.68727;117.230755,33.687331;117.231476,33.687391;117.235938,33.687812;117.236372,33.687856;117.237001,33.687917;117.237574,33.687964;117.237708,33.687973;117.238346,33.68803;117.239401,33.688125;117.241393,33.688312;117.242096,33.688377;117.242144,33.688381;117.242847,33.688446;117.243069,33.688468;117.244718,33.688624;117.245642,33.688724;117.246094,33.688763;117.246385,33.688789;117.246467,33.688103;117.24661,33.68697;117.246871,33.685039;117.246997,33.68408;117.24704,33.683776;117.247049,33.68372;117.247222,33.6824;117.247261,33.682127;117.2474,33.681024;117.247413,33.680959;117.247487,33.680404";
        LineOnTheWay ridDistance = new LineOnTheWay();
        System.out.println(ridDistance.evaluate(jwd, rid));
    }
}
